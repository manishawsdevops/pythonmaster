# #sets are pretty much important data type. Its another data structure.
# # These are un-ordered colleciton of unique values.

# my_set = {1,2,3,4,5}

# print(my_set)

# my_set.add(100)
# my_set.add(2)
# print(my_set)

# #convert the list into set - where to get the unique items from a list.
# my_list = [1,2,3,3,4,5,5,6,7,7,8,9]
# print(my_list)
# print(set(my_list))

# #sets cannot be accesed by indexing - We can access it by the keyword "in" like below

# my_set = {1,2,3,4,5,5}

# print(my_set)
# print(len(my_set))
# print(list(my_set))
# print( 5 in my_set)

# #Sets also have similar funtions like .copy as we have for dict.

# my_new_set = my_set.copy()
# my_set.clear()
# print(my_set)
# print(my_new_set)

# #different methods in sets that are majorly used.
# #.difference(),.discard(),.difference_update(),.intersection(),.isdisjoint(),.isubset(),
# #.issuperset(),.union()

# my_set = {1,2,3,4,5}
# your_set = {4,5,6,7,8,9,10}

##################################################
# You are working for the school Principal. We have a database of school students:
school = {'Bobby','Tammy','Jammy','Sally','Danny'}

#during class, the teachers take attendance and compile it into a list. 
attendance_list = ['Jammy', 'Bobby', 'Danny', 'Sally']

#using what you learned about sets, 
# #create a piece of code that the school principal can use to immediately find out who missed class 
# so they can call the parents. 
# (Imagine if the list had 1000s of students. 
# The principal can use the lists generated by the teachers + 
# the school database to use python and make his/her job easier): 
# Find the students that miss class!

print(school.difference(attendance_list))

